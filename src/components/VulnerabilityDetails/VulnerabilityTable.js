import React, { useState, useMemo } from 'react';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import TableSortLabel from '@mui/material/TableSortLabel';
import {
  Chip,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Stack,
  Box,
  Typography,
} from '@mui/material';
import {
  VULNERABILITY_DATA,
  getVulnerabilitySeverityColor,
  getVulnerabilityStatusColor,
  getSortedVulnerabilityData,
} from './VulnerabilityDetails.util';

function VulnerabilityTable() {
  const [order, setOrder] = useState('asc');
  const [orderBy, setOrderBy] = useState('vulnId');
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('');

  const handleRequestSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedRows = useMemo(() => {
    let filteredData = [...VULNERABILITY_DATA];

    // Filter by search term (title)
    if (searchTerm) {
      filteredData = filteredData.filter((vulnerability) =>
        vulnerability.title.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Filter by severity
    if (severityFilter) {
      filteredData = filteredData.filter(
        (vulnerability) =>
          vulnerability.severity.toLowerCase() === severityFilter.toLowerCase()
      );
    }

    // Sort the filtered data
    return getSortedVulnerabilityData(filteredData, orderBy, order);
  }, [order, orderBy, searchTerm, severityFilter]);

  // Get unique severity values for the dropdown
  const uniqueSeverities = useMemo(() => {
    return [...new Set(VULNERABILITY_DATA.map((vuln) => vuln.severity))];
  }, []);
  return (
    <Paper>
      {/* Header with Filter Controls */}
      <Box
        sx={{
          p: 2,
          pb: 0,
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <Typography variant='h6'>Vulnerability Details</Typography>

        <Stack direction='row' spacing={2}>
          <TextField
            size='small'
            label='Search by title'
            variant='outlined'
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            sx={{ minWidth: 200 }}
          />
          <FormControl size='small' sx={{ minWidth: 150 }}>
            <InputLabel>Filter by Severity</InputLabel>
            <Select
              value={severityFilter}
              label='Filter by Severity'
              onChange={(e) => setSeverityFilter(e.target.value)}
            >
              <MenuItem value=''>All Severities</MenuItem>
              {uniqueSeverities.map((severity) => (
                <MenuItem key={severity} value={severity}>
                  {severity}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Stack>
      </Box>

      <TableContainer>
        <Table
          sx={{ minWidth: 650, mt: 2 }}
          size='small'
          aria-label='vulnerability table'
        >
          <TableHead>
            <TableRow>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'vulnId'}
                  direction={orderBy === 'vulnId' ? order : 'asc'}
                  onClick={() => handleRequestSort('vulnId')}
                >
                  Vulnerability ID
                </TableSortLabel>
              </TableCell>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'title'}
                  direction={orderBy === 'title' ? order : 'asc'}
                  onClick={() => handleRequestSort('title')}
                >
                  Title
                </TableSortLabel>
              </TableCell>
              <TableCell align='center'>
                <TableSortLabel
                  active={orderBy === 'severity'}
                  direction={orderBy === 'severity' ? order : 'asc'}
                  onClick={() => handleRequestSort('severity')}
                >
                  Severity
                </TableSortLabel>
              </TableCell>
              <TableCell align='right'>
                <TableSortLabel
                  active={orderBy === 'cvssScore'}
                  direction={orderBy === 'cvssScore' ? order : 'asc'}
                  onClick={() => handleRequestSort('cvssScore')}
                >
                  CVSS Score
                </TableSortLabel>
              </TableCell>
              <TableCell>
                <TableSortLabel
                  active={orderBy === 'affectedAsset'}
                  direction={orderBy === 'affectedAsset' ? order : 'asc'}
                  onClick={() => handleRequestSort('affectedAsset')}
                >
                  Affected Asset
                </TableSortLabel>
              </TableCell>
              <TableCell align='center'>
                <TableSortLabel
                  active={orderBy === 'status'}
                  direction={orderBy === 'status' ? order : 'asc'}
                  onClick={() => handleRequestSort('status')}
                >
                  Status
                </TableSortLabel>
              </TableCell>
              <TableCell align='right'>
                <TableSortLabel
                  active={orderBy === 'discoveredDate'}
                  direction={orderBy === 'discoveredDate' ? order : 'asc'}
                  onClick={() => handleRequestSort('discoveredDate')}
                >
                  Discovered Date
                </TableSortLabel>
              </TableCell>
              <TableCell align='right'>
                <TableSortLabel
                  active={orderBy === 'daysOpen'}
                  direction={orderBy === 'daysOpen' ? order : 'asc'}
                  onClick={() => handleRequestSort('daysOpen')}
                >
                  Days Open
                </TableSortLabel>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {sortedRows.map((row) => (
              <TableRow
                key={row.vulnId}
                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
              >
                <TableCell component='th' scope='row'>
                  {row.vulnId}
                </TableCell>
                <TableCell
                  sx={{
                    maxWidth: 300,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap',
                  }}
                >
                  {row.title}
                </TableCell>
                <TableCell align='center'>
                  <Chip
                    label={row.severity}
                    color={getVulnerabilitySeverityColor(row.severity)}
                    size='small'
                  />
                </TableCell>
                <TableCell align='right'>
                  <strong>{row.cvssScore}</strong>
                </TableCell>
                <TableCell>{row.affectedAsset}</TableCell>
                <TableCell align='center'>
                  <Chip
                    label={row.status}
                    color={getVulnerabilityStatusColor(row.status)}
                    size='small'
                    variant='outlined'
                  />
                </TableCell>
                <TableCell align='right'>{row.discoveredDate}</TableCell>
                <TableCell align='right'>
                  {row.daysOpen > 0 ? row.daysOpen : '-'}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
}

export default VulnerabilityTable;
