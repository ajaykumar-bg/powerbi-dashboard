import React, { useState, useMemo } from 'react';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import TableSortLabel from '@mui/material/TableSortLabel';
import { Chip } from '@mui/material';

function createData(
  vulnId,
  title,
  severity,
  cvssScore,
  affectedAsset,
  status,
  discoveredDate,
  daysOpen
) {
  return {
    vulnId,
    title,
    severity,
    cvssScore,
    affectedAsset,
    status,
    discoveredDate,
    daysOpen,
  };
}

const rows = [
  createData(
    'CVE-2024-0001',
    'SQL Injection in User Authentication Module',
    'Critical',
    9.8,
    'Auth Service API',
    'Open',
    '2024-08-15',
    32
  ),
  createData(
    'CVE-2024-0002',
    'Cross-Site Scripting (XSS) in Dashboard',
    'High',
    7.4,
    'Web Application',
    'In Progress',
    '2024-08-20',
    27
  ),
  createData(
    'CVE-2024-0003',
    'Insecure Direct Object References',
    'High',
    8.1,
    'API Gateway',
    'Open',
    '2024-08-25',
    22
  ),
  createData(
    'CVE-2024-0004',
    'Missing Input Validation in File Upload',
    'Medium',
    6.5,
    'File Upload Service',
    'Resolved',
    '2024-07-10',
    0
  ),
  createData(
    'CVE-2024-0005',
    'Weak Password Policy Implementation',
    'Medium',
    5.8,
    'User Management',
    'Open',
    '2024-09-01',
    15
  ),
  createData(
    'CVE-2024-0006',
    'Information Disclosure in Error Messages',
    'Low',
    3.7,
    'API Responses',
    'In Progress',
    '2024-08-30',
    17
  ),
  createData(
    'CVE-2024-0007',
    'Insufficient Session Timeout',
    'Medium',
    4.9,
    'Session Manager',
    'Open',
    '2024-09-05',
    11
  ),
  createData(
    'CVE-2024-0008',
    'Privilege Escalation in Admin Panel',
    'Critical',
    9.1,
    'Admin Interface',
    'Open',
    '2024-09-10',
    6
  ),
  createData(
    'CVE-2024-0009',
    'Unvalidated Redirects and Forwards',
    'Low',
    4.3,
    'Web Application',
    'Resolved',
    '2024-07-25',
    0
  ),
  createData(
    'CVE-2024-0010',
    'Insecure Cryptographic Storage',
    'High',
    7.8,
    'Database Server',
    'In Progress',
    '2024-08-18',
    29
  ),
];

function getSeverityColor(severity) {
  switch (severity.toLowerCase()) {
    case 'critical':
      return 'error';
    case 'high':
      return 'warning';
    case 'medium':
      return 'info';
    case 'low':
      return 'success';
    default:
      return 'default';
  }
}

function getStatusColor(status) {
  switch (status.toLowerCase()) {
    case 'open':
      return 'error';
    case 'in progress':
      return 'warning';
    case 'resolved':
      return 'success';
    default:
      return 'default';
  }
}

function VulnerabilityTable() {
  const [order, setOrder] = useState('asc');
  const [orderBy, setOrderBy] = useState('vulnId');

  const handleRequestSort = (property) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedRows = useMemo(() => {
    return [...rows].sort((a, b) => {
      let aValue = a[orderBy];
      let bValue = b[orderBy];

      // Handle different data types
      if (orderBy === 'cvssScore' || orderBy === 'daysOpen') {
        aValue = Number(aValue);
        bValue = Number(bValue);
      } else if (orderBy === 'discoveredDate') {
        aValue = new Date(aValue);
        bValue = new Date(bValue);
      } else {
        aValue = String(aValue).toLowerCase();
        bValue = String(bValue).toLowerCase();
      }

      if (order === 'asc') {
        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
      } else {
        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
      }
    });
  }, [order, orderBy]);
  return (
    <TableContainer component={Paper}>
      <Table
        sx={{ minWidth: 650 }}
        size='small'
        aria-label='vulnerability table'
      >
        <TableHead>
          <TableRow>
            <TableCell>
              <TableSortLabel
                active={orderBy === 'vulnId'}
                direction={orderBy === 'vulnId' ? order : 'asc'}
                onClick={() => handleRequestSort('vulnId')}
              >
                Vulnerability ID
              </TableSortLabel>
            </TableCell>
            <TableCell>
              <TableSortLabel
                active={orderBy === 'title'}
                direction={orderBy === 'title' ? order : 'asc'}
                onClick={() => handleRequestSort('title')}
              >
                Title
              </TableSortLabel>
            </TableCell>
            <TableCell align='center'>
              <TableSortLabel
                active={orderBy === 'severity'}
                direction={orderBy === 'severity' ? order : 'asc'}
                onClick={() => handleRequestSort('severity')}
              >
                Severity
              </TableSortLabel>
            </TableCell>
            <TableCell align='right'>
              <TableSortLabel
                active={orderBy === 'cvssScore'}
                direction={orderBy === 'cvssScore' ? order : 'asc'}
                onClick={() => handleRequestSort('cvssScore')}
              >
                CVSS Score
              </TableSortLabel>
            </TableCell>
            <TableCell>
              <TableSortLabel
                active={orderBy === 'affectedAsset'}
                direction={orderBy === 'affectedAsset' ? order : 'asc'}
                onClick={() => handleRequestSort('affectedAsset')}
              >
                Affected Asset
              </TableSortLabel>
            </TableCell>
            <TableCell align='center'>
              <TableSortLabel
                active={orderBy === 'status'}
                direction={orderBy === 'status' ? order : 'asc'}
                onClick={() => handleRequestSort('status')}
              >
                Status
              </TableSortLabel>
            </TableCell>
            <TableCell align='right'>
              <TableSortLabel
                active={orderBy === 'discoveredDate'}
                direction={orderBy === 'discoveredDate' ? order : 'asc'}
                onClick={() => handleRequestSort('discoveredDate')}
              >
                Discovered Date
              </TableSortLabel>
            </TableCell>
            <TableCell align='right'>
              <TableSortLabel
                active={orderBy === 'daysOpen'}
                direction={orderBy === 'daysOpen' ? order : 'asc'}
                onClick={() => handleRequestSort('daysOpen')}
              >
                Days Open
              </TableSortLabel>
            </TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {sortedRows.map((row) => (
            <TableRow
              key={row.vulnId}
              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
            >
              <TableCell component='th' scope='row'>
                {row.vulnId}
              </TableCell>
              <TableCell
                sx={{
                  maxWidth: 300,
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap',
                }}
              >
                {row.title}
              </TableCell>
              <TableCell align='center'>
                <Chip
                  label={row.severity}
                  color={getSeverityColor(row.severity)}
                  size='small'
                />
              </TableCell>
              <TableCell align='right'>
                <strong>{row.cvssScore}</strong>
              </TableCell>
              <TableCell>{row.affectedAsset}</TableCell>
              <TableCell align='center'>
                <Chip
                  label={row.status}
                  color={getStatusColor(row.status)}
                  size='small'
                  variant='outlined'
                />
              </TableCell>
              <TableCell align='right'>{row.discoveredDate}</TableCell>
              <TableCell align='right'>
                {row.daysOpen > 0 ? row.daysOpen : '-'}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

export default VulnerabilityTable;
